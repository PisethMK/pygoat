name: CI-CD DevSecOps - Self-Hosted Runner (PyGoat)

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

# least privilege permissions for this workflow
permissions:
  contents: read
  security-events: write
  packages: write

env:
  APP_DIR: "."                 # repo root (Dockerfile & docker-compose.yml there)
  IMAGE: pygoat:latest         # local image tag used on the runner
  DOCKER_COMPOSE_PATH: /opt/pygoat   # path on runner where docker-compose.yml lives (change as needed)

jobs:
  checks:
    name: Static / Dependency / Lint
    runs-on: self-hosted
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show repo files (debug)
        run: ls -la

      - name: Setup Python (for running bandit / pip-audit / tests)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit pip-audit pytest

      - name: Run unit tests (if any)
        run: |
          if [ -d "./tests" ] || pytest --maxfail=1 -q; then
            pytest -q || true
          else
            echo "No tests detected or tests failed (continue)"; true
          fi

      - name: Run Bandit SAST (JSON)
        run: bandit -r . -f json -o bandit.json || true

      - name: Convert Bandit JSON to SARIF
        run: |
          pip install sarif-tools
          sarif-tools from-bandit bandit.json bandit.sarif
      
      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

      - name: pip-audit dependency scan
        run: |
          # pip-audit expects a requirements file; try common locations
          if [ -f "requirements.txt" ]; then
            pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          else
            echo "requirements.txt not found; skipping pip-audit"
          fi
      - name: Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif

      - name: Hadolint Dockerfile (if hadolint installed)
        run: |
          if command -v hadolint >/dev/null 2>&1; then
            hadolint Dockerfile || true
          else
            echo "hadolint not present on runner â€” skipping (install on runner for lint)."
          fi

  build-and-deploy:
    name: Build, Scan, Push (optional), Deploy (local)
    runs-on: self-hosted
    needs: checks
    environment:
      name: production
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Print Docker & Compose versions (debug)
        run: |
          docker --version || true
          docker compose version || docker-compose --version || true
          which trivy || echo "trivy not installed"

      - name: Build Docker image (local)
        run: |
          docker build -t $IMAGE .

      - name: Trivy image scan (if trivy installed)
        run: |
          if command -v trivy >/dev/null 2>&1; then
            trivy image --format sarif --output trivy-image.sarif $IMAGE || true
          else
            echo "trivy not installed; install trivy on runner to enable image scanning."
          fi
      - name: Upload Trivy SARIF (if produced)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      # Optional: push to registry (GHCR) if you want an external image registry
      - name: Optional Push to GHCR (uncomment to enable)
        if: false
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Optional Push image (uncomment to enable)
        if: false
        run: docker tag $IMAGE ghcr.io/${{ github.repository }}:latest && docker push ghcr.io/${{ github.repository }}:latest

      - name: Deploy with docker-compose (local runner)
        run: |
          # ensure the compose file is at DOCKER_COMPOSE_PATH on the runner
          # or use repo's docker-compose.yml directly.
          if [ -f "$DOCKER_COMPOSE_PATH/docker-compose.yml" ]; then
            cd $DOCKER_COMPOSE_PATH
          else
            cd $GITHUB_WORKSPACE || true
          fi

          # Pull updated image if using remote registry (skip if using local built image)
          # docker compose pull || true

          # Bring up the service defined in docker-compose.yml
          docker compose up -d --build --remove-orphans

          # small health-check (adjust to your app endpoint)
          sleep 5
          if docker compose ps | grep -q pygoat || true; then
            echo "Compose services started"
          fi

          # cleanup
          docker image prune -f || true
