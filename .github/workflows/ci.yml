name: SonarQube SAST Scan

on:
  push:
    branches: [ "master", "main" ]
  pull_request:      # üëà also run on PRs so developers see results inline
  workflow_dispatch:

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  TARGET_HOST: ${{ secrets.TARGET_HOST }}
  TARGET_USER: ${{ secrets.TARGET_USER }}
  TARGET_SSH_KEY: ${{ secrets.TARGET_SSH_KEY }}
  TARGET_FOLDER: /home/appserver/pygoat   # Target folder on server

jobs:
  ci:
    name: SonarQube Analysis
    runs-on: self-hosted   # your self-hosted runner
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Install Sonar Scanner
        run: |
          if [ ! -d "/home/appserver/sonar-scanner-7.2.0.5079-linux-x64" ]; then
            echo "SonarQube Scanner not found. Installing..."
            wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-7.2.0.5079-linux-x64.zip -O /tmp/sonar-scanner.zip
            unzip /tmp/sonar-scanner.zip -d /home/appserver/
          else
            echo "SonarQube Scanner already installed. Skipping download."
          fi
        shell: bash

      - name: Run SonarQube Scan
        run: |
          export PATH=$PATH:/home/appserver/sonar-scanner-7.2.0.5079-linux-x64/bin
          sonar-scanner \
            -Dsonar.projectKey=pygoat \
            -Dsonar.projectName=pygoat \
            -Dsonar.projectVersion=1.0 \
            -Dsonar.sources=./ \
            -Dsonar.test.inclusions=./ \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.token=$SONAR_TOKEN \
            -Dsonar.python.version=3.8

      - name: Fetch SonarQube issues
        run: |
          curl -v --request GET \
            --url "$SONAR_HOST_URL/api/issues/search?componentKeys=nodemultiplayersnake" \
            -u "$SONAR_TOKEN:" \
            -o sonar-report.json

      - name: Upload SonarQube Json report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-json-report
          path: sonar-report.json

      - name: Generate HTML Report from JSON
        run: |
          python <<'EOF'
          import json
          from pathlib import Path

          report_file = Path("sonar-report.json")
          if not report_file.exists() or report_file.stat().st_size == 0:
              print("‚ö†Ô∏è sonar-report.json is missing or empty.")
              Path("sonar-report.html").write_text(
                  "<html><body><h2>No SonarQube issues found or report unavailable.</h2></body></html>",
                  encoding="utf-8"
              )
              exit(0)

          try:
              data = json.loads(report_file.read_text(encoding="utf-8"))
          except json.JSONDecodeError as e:
              print(f"‚ö†Ô∏è Failed to parse sonar-report.json: {e}")
              Path("sonar-report.html").write_text(
                  f"<html><body><h2>Invalid JSON in sonar-report.json</h2><pre>{e}</pre></body></html>",
                  encoding="utf-8"
              )
              exit(1)

          issues = data.get("issues", [])

          html = [
              "<html><head><title>SonarQube Report</title></head><body>",
              "<h1>SonarQube Issues Report</h1>",
              f"<p>Total Issues: {len(issues)}</p>",
              "<table border='1' cellspacing='0' cellpadding='5'>",
              "<tr><th>Severity</th><th>Type</th><th>Message</th><th>File</th><th>Line</th></tr>"
          ]

          for issue in issues:
              comp = issue.get("component", "N/A").split(":")[-1]
              html.append(
                  f"<tr>"
                  f"<td>{issue.get('severity')}</td>"
                  f"<td>{issue.get('type')}</td>"
                  f"<td>{issue.get('message')}</td>"
                  f"<td>{comp}</td>"
                  f"<td>{issue.get('line', '')}</td>"
                  f"</tr>"
              )

          html.append("</table></body></html>")
          Path("sonar-report.html").write_text("\n".join(html), encoding="utf-8")
          EOF

      - name: Upload SonarQube HTML report
        uses: actions/upload-artifact@v4
        with:
          name: sonar-html-report
          path: sonar-report.html
  
  
  cd:
    name: Docker Deploy
    needs: ci
    runs-on: self-hosted

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker image
        run: |
          docker build -t $DOCKERHUB_USERNAME/pygoat:latest .
          docker push $DOCKERHUB_USERNAME/pygoat:latest

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.TARGET_HOST }}
          username: ${{ secrets.TARGET_USER }}
          key: ${{ secrets.TARGET_SSH_KEY }}
          script: |
            mkdir -p $TARGET_FOLDER
            cd $TARGET_FOLDER
            docker pull $DOCKERHUB_USERNAME/pygoat:latest
            docker-compose down || true
            docker-compose up -d --build